<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data_8hpp" kind="file" language="C++">
    <compoundname>data.hpp</compoundname>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">ctime</includes>
    <includes local="no">mutex</includes>
    <includes local="no">string</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="resource_8h" local="yes">resource.h</includes>
    <includes refid="netmsg_8hpp" local="yes">netmsg.hpp</includes>
    <includes refid="filedownload_8hpp" local="yes">filedownload.hpp</includes>
    <includedby refid="p2p-actions_8hpp" local="yes">C:/Users/Artur/Downloads/TIN-master/p2p-actions.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>sys/stat.h</label>
      </node>
      <node id="19">
        <label>list</label>
      </node>
      <node id="12">
        <label>netinet/in.h</label>
      </node>
      <node id="15">
        <label>arpa/inet.h</label>
      </node>
      <node id="9">
        <label>structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>resource.h</label>
        <link refid="resource_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>filedownload.hpp</label>
        <link refid="filedownload_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="2">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>netdb.h</label>
      </node>
      <node id="17">
        <label>pthread.h</label>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="3">
        <label>ctime</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="23">
        <label>vector</label>
      </node>
      <node id="22">
        <label>sstream</label>
      </node>
      <node id="0">
        <label>C:/Users/Artur/Downloads/TIN-master/data.hpp</label>
        <link refid="data_8hpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>netmsg.hpp</label>
        <link refid="netmsg_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>deque</label>
      </node>
      <node id="10">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>sys/socket.h</label>
      </node>
      <node id="20">
        <label>set</label>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>host.hpp</label>
        <link refid="host_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="27">
        <label>C:/Users/Artur/Downloads/TIN-master/data.hpp</label>
        <link refid="data_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>C:/Users/Artur/Downloads/TIN-master/p2p-actions.hpp</label>
        <link refid="p2p-actions_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmutex__wrapper" prot="public">mutex_wrapper</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="data_8hpp_1ad7e306ad4d8cfef5a438cc0863e169d7" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* configFilePath</definition>
        <argsstring></argsstring>
        <name>configFilePath</name>
        <initializer>= &quot;./p2p.config&quot;</initializer>
        <briefdescription>
<para>Ściezka do pliku konfiguracyjnego okreslajacego katalog, do ktorego zapisywane beda sciagniete pliki. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="23" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;</type>
        <definition>std::list&lt;Resource&gt; metaData</definition>
        <argsstring></argsstring>
        <name>metaData</name>
        <briefdescription>
<para>lista zasobów posiadanych lokalnie. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="51" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" prot="public" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t metaDataMutex</definition>
        <argsstring></argsstring>
        <name>metaDataMutex</name>
        <briefdescription>
<para>Mutex synchronizujący dostęp do metadanych. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="53" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data_8hpp_1a172ea8b9f4edd0d37a2d8aabb7c85fc5" prot="public" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t fileMutexDequeMutex</definition>
        <argsstring></argsstring>
        <name>fileMutexDequeMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="54" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="data_8hpp_1ad319bb1cb29b05901905d84f8c56f7ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool deleteFile</definition>
        <argsstring>(FileID *id)</argsstring>
        <name>deleteFile</name>
        <param>
          <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Usuń posiadany lokalnie zasób. </para>        </briefdescription>
        <detaileddescription>
<para>Usuwa takze plik na dysku, zwiazany z danym zasobem. Zwraca true w przypadku zakonczenia operacji usuniecia zasobu. <simplesect kind="return"><para>true w przypadku powodzenia operacji, false w przypadku błędu. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="56" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="193" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a2e45c183b7abaaffcfba8fb45595484b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
        <definition>list&lt; Resource &gt;::iterator openResource</definition>
        <argsstring>(ResourceHeader *header)</argsstring>
        <name>openResource</name>
        <param>
          <type><ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Utwórz zasób lokalny. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Nagłówek komunikatu AAP zawierający dane o zasobie do utworzenia. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator do utworzonego zasobu </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="57" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="269" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a9c5ef7840fcccd527006388d6dd3a732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> * &gt;</type>
        <definition>vector&lt; FileID * &gt; myFindInStorage</definition>
        <argsstring>(ResourceHeader *header)</argsstring>
        <name>myFindInStorage</name>
        <param>
          <type><ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Zwraca listę posiadanych zupełnie zasobów (tzn. </para>        </briefdescription>
        <detaileddescription>
<para>pobranych już w 100%). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="58" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="404" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a51820ea103c788c385174c9ad9185a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
        <definition>list&lt; Resource &gt;::iterator openResourceByIterator</definition>
        <argsstring>(ResourceHeader *header, bool *isNotEmpty)</argsstring>
        <name>openResourceByIterator</name>
        <param>
          <type><ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isNotEmpty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="59" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="438" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a3a3e05163d2c1bd8eb187195d8ac9c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;</type>
        <definition>std::list&lt; Resource &gt; getMetaData</definition>
        <argsstring>()</argsstring>
        <name>getMetaData</name>
        <briefdescription>
<para>Zwraca listę zasobów posiadanych lokalnie - czyli metadane. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="60" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a7f3ebb7cc672825f174046fea067d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref> *</type>
        <definition>FileFragment * getFileFragment</definition>
        <argsstring>(FileID *id, long number)</argsstring>
        <name>getFileFragment</name>
        <param>
          <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>long</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Zwraca pojedyczny blok pliku. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FileID</parametername>
</parameternamelist>
<parameterdescription>
<para>z ktorego pliku pochodzi fragment, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Indeks fragmentu w ramach pliku.</para></parameterdescription>
</parameteritem>
</parameterlist>
Jezeli pozycja pliku znajduje sie w metaDanych, ale nie istnieje jako plik w pamieci, to jego pozycja jest kasowana w metaDanych. Jezeli nie udalo sie odnalezc pliku badz fragmentu w nim, zwraca null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="61" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="465" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1abe48d7a77b7a67d434c71d66fadb7af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool saveFileFragment</definition>
        <argsstring>(FileID *id, FileFragment *fragment)</argsstring>
        <name>saveFileFragment</name>
        <param>
          <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref> *</type>
          <declname>fragment</declname>
        </param>
        <briefdescription>
<para>Zapisuje fragment fragment pliku do pamieci. </para>        </briefdescription>
        <detaileddescription>
<para>Wymagane jest, aby plik istnial w metadanych, oraz jako plik w pamieci - inaczej zwracane jest false.</para><para>Jezeli pozycja pliku znajduje sie w metaDanych, ale nie istnieje jako plik w pamieci, to jego pozycja jest kasowana w metaDanych.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>identyfikator pliku do zapisu </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>Blok pliku do zapisu </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false jezeli zapis sie nie powiodl, plik nie istnial w pamieci badz w metaDanych. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="62" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="519" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a9f9ce666365f27074a032061ed21b96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool initiateMutexes</definition>
        <argsstring>()</argsstring>
        <name>initiateMutexes</name>
        <briefdescription>
<para>Inicjuje dwa mutexy uzywane przy dostepie do metaDanych oraz listyMutexow dla plikow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="63" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="581" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a36c612ff549082b179c5b61e43172944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool destroyMutexes</definition>
        <argsstring>()</argsstring>
        <name>destroyMutexes</name>
        <briefdescription>
<para>Zwalnia dwa mutexy uzywane przy dostepie do metaDanych oraz listyMutexow dla plikow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="64" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="595" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a907cb8541be0266a9b471f343083f58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lockMetaDataMutex</definition>
        <argsstring>()</argsstring>
        <name>lockMetaDataMutex</name>
        <briefdescription>
<para>Lock na mutexie dostepu do metaDanych. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="65" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="603" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unlockMetaDataMutex</definition>
        <argsstring>()</argsstring>
        <name>unlockMetaDataMutex</name>
        <briefdescription>
<para>Unlock na mutexie dostepu do metaDanych. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="66" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="610" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_id</definition>
        <argsstring>()</argsstring>
        <name>get_id</name>
        <briefdescription>
<para>Zwróć id wezla na podstawie adresu MAC karty sieciowej. </para>        </briefdescription>
        <detaileddescription>
<para>Preferowana jest karta ethernetowa, jesli takiej nie ma - pobierany jest adres MAC pierwszej karty sieciowej z listy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="67" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="618" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t bytesToLong</definition>
        <argsstring>(const char *bytes)</argsstring>
        <name>bytesToLong</name>
        <param>
          <type>const char *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Konwersja ciągu bajtów na uint64_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="68" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="957" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a92b70bd6d6589844a997c437e031e5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string returnFilePath</definition>
        <argsstring>(const char *cfg_path, const char *filename)</argsstring>
        <name>returnFilePath</name>
        <param>
          <type>const char *</type>
          <declname>cfg_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Utwórz nowy plik na dysku. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Ściezka do pliku konfiguracyjnego, w ktorym znajdziemy lokalizacje katalogu, w ktorym znalezc ma sie plik. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Nazwa pliku do utworzenia </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pełna ścieżka do utworzonego pliku lub pusty string w razie niepowodzenia. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="69" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="973" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt; string &gt; putToParts</definition>
        <argsstring>(string s, char dividerLeft, char dividerRight)</argsstring>
        <name>putToParts</name>
        <param>
          <type>string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Podział stringa na fragmenty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dividerLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter z początku fragmentu </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dividerRight</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter na końcu fragmentu </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="70" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="690" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a120af63c8003fb18da665f7e307584db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string buildFromParts</definition>
        <argsstring>(vector&lt; string &gt; parts, char dividerLeft, char dividerRight)</argsstring>
        <name>buildFromParts</name>
        <param>
          <type>vector&lt; string &gt;</type>
          <declname>parts</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Konkatenacja wektora stringów. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dividerLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter na początku każdego stringa </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dividerRight</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter na końcu każdego stringa </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String będący efektem konkatenacji </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="71" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="721" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a58b4deac4933aab644e32483d5192942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_resource" kindref="compound">Resource</ref> *</type>
        <definition>Resource * des2Resource</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2Resource</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja stringa do obiektu <ref refid="struct_resource" kindref="compound">Resource</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="72" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="732" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a3461ef405c06f76bad7c84ea825bae8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2Resource</definition>
        <argsstring>(Resource *r, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2Resource</name>
        <param>
          <type><ref refid="struct_resource" kindref="compound">Resource</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja obiektu typu <ref refid="struct_resource" kindref="compound">Resource</ref> do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="73" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="746" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1ae0329aa66b908f871aca1187d959d876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
        <definition>FileID * des2FileID</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2FileID</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja stringa do obiektu typu FileID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="74" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="762" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a89ab6b1a96da4bdb90b6fef803c460d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2FileID</definition>
        <argsstring>(FileID *id, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2FileID</name>
        <param>
          <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja obiektu typu FileID do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="75" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="777" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1aee4b603e62817650a4d537cc6b307536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_host" kindref="compound">Host</ref> *</type>
        <definition>Host * des2Host</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2Host</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja stringa do obiektu typu <ref refid="class_host" kindref="compound">Host</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="76" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="794" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a9fa57461540505d3f97b7f4e1d1347a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2Host</definition>
        <argsstring>(Host *host, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2Host</name>
        <param>
          <type><ref refid="class_host" kindref="compound">Host</ref> *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja obiektu typu <ref refid="class_host" kindref="compound">Host</ref> do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="77" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="809" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1afccb319fe665a14274de06fb67fd7a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sockaddr_in</type>
        <definition>sockaddr_in des2SockAddr_in</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2SockAddr_in</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja stringa na obiekt typu sockaddr_in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="78" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="834" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a1940374549adff8f8fcf302b4c7cf88c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2SockAddr_in</definition>
        <argsstring>(sockaddr_in sa, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2SockAddr_in</name>
        <param>
          <type>sockaddr_in</type>
          <declname>sa</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja obkiektu typu sockaddr_in na stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="79" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="847" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a0bc93f029db8bd46036aa34db2c1f91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>deque&lt; <ref refid="class_host" kindref="compound">Host</ref> &gt; *</type>
        <definition>deque&lt; Host &gt; * des2dequeHost</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2dequeHost</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja stringa do kolejki hostów. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="80" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="864" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a115dc969b812309e2bb555fb239e65dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2dequeHost</definition>
        <argsstring>(deque&lt; Host &gt; *d, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2dequeHost</name>
        <param>
          <type>deque&lt; <ref refid="class_host" kindref="compound">Host</ref> &gt; *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja kolejki hostów do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="81" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="877" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a311e2d4ada7aa2a8e398c2b3aef0974d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; long &gt;</type>
        <definition>vector&lt; long &gt; des2vectorLong</definition>
        <argsstring>(string build, char dividerLeft, char dividerRight)</argsstring>
        <name>des2vectorLong</name>
        <param>
          <type>string</type>
          <declname>build</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Deserializacja wektora liczb do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="82" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="891" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1ad0eaf7b063d50cd5cdd7729d1a1748de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ser2vectorLong</definition>
        <argsstring>(vector&lt; long &gt; vl, char dividerLeft, char dividerRight)</argsstring>
        <name>ser2vectorLong</name>
        <param>
          <type>vector&lt; long &gt;</type>
          <declname>vl</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerLeft</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dividerRight</declname>
        </param>
        <briefdescription>
<para>Serializacja wektora liczb do stringa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="83" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="904" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a536b6d7add4d4fdca93c5de0f945c130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool serializeMetaData</definition>
        <argsstring>()</argsstring>
        <name>serializeMetaData</name>
        <briefdescription>
<para>Serializacja metadanych i zapis do pliku &quot;_metaData.txt&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="84" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="918" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a2357c582d35d9ae38dd79b66aec36ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool deserializeMetaData</definition>
        <argsstring>()</argsstring>
        <name>deserializeMetaData</name>
        <briefdescription>
<para>Otwiera plik &quot;_metaData.txt&quot; i deserializuje zawartośc do list&lt;Resource&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="85" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="938" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a89895ee5bc432ebf982721021ee5ed5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> * &gt;</type>
        <definition>list&lt; FileID * &gt; getUnlinked</definition>
        <argsstring>()</argsstring>
        <name>getUnlinked</name>
        <briefdescription>
<para>Walidacja adresów fizycznych plików. </para>        </briefdescription>
        <detaileddescription>
<para>W razie zapisania w metadanych nieistniejącej ścieżki, zasób jest usuwany z rejestru. <simplesect kind="return"><para>Lista niepoprawnych zasobów </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="86" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="384" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a8327ff30bca5f48ce70c85055a771eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fileIsDownloading</definition>
        <argsstring>(list&lt; Resource &gt;::iterator it)</argsstring>
        <name>fileIsDownloading</name>
        <param>
          <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Zwraca true gdy zasób wskazywany przez iterator jest aktualnie pobierany na dysk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="87" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a9fa5a4bf9a71ff69aaa670b097b3c2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool setFileIsDownloading</definition>
        <argsstring>(list&lt; Resource &gt;::iterator it)</argsstring>
        <name>setFileIsDownloading</name>
        <param>
          <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Ustawia flagę wskazującą na aktualne pobieranie zasobu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="88" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a60695726d9d0486ddd7a54bafb820795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
        <definition>list&lt;Resource&gt;::iterator addFile</definition>
        <argsstring>(string pathName, string fileName)</argsstring>
        <name>addFile</name>
        <param>
          <type>string</type>
          <declname>pathName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Dodanie dodajen nowy zasób do rejestru zasobów lokalnych hosta. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pathName</parametername>
</parameternamelist>
<parameterdescription>
<para>- sciezka do pliku na dysku </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>- nazwa, pod jaka plik bedzie udostepniony jako zasob </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator do nowo utworzonego zasobu. Jesli istnieje już zasob o tej samej nazwie i rozmiarze lub udostepniajacy plik spod tej samej lokalizacji, operacja dodania nie udaje sie i zwracany jest iterator do tego zasobu. Jesli sciezka do pliku jest nieprawidlowa - zwracany jest iterator::end() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="115" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="115" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1aa012024561c41d22fcccb80d2803ff89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> * &gt;</type>
        <definition>list&lt;FileID*&gt; getFileIds</definition>
        <argsstring>()</argsstring>
        <name>getFileIds</name>
        <briefdescription>
<para>Lista ID wszystkich plików posiadanych lokalnie przez hosta. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="176" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="176" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1af41ac35f7bec745690a4038c692e23d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
        <definition>FileID* isFileInStorage</definition>
        <argsstring>(ResourceHeader *header)</argsstring>
        <name>isFileInStorage</name>
        <param>
          <type><ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>ZwróćID posiadanego lokalnie zasobu. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Nagłówek komunikatu dotyczącego pliku którego szukamy. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Adres struktury FileID, związanej z szukanym plikiem. Jesli w bazie zasobow nie ma odpowiadajacego obiektu, funkjca zwraca null. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="222" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="222" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1ad6b4f2daae819d8fcf5a5bb22b5b7c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool changeOwner</definition>
        <argsstring>(FileID *id, const char *newOwner, time_t addTime)</argsstring>
        <name>changeOwner</name>
        <param>
          <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newOwner</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>addTime</declname>
        </param>
        <briefdescription>
<para>Zmień parametry zasobu. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Zasób do modyfikacji </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newOwner</parametername>
</parameternamelist>
<parameterdescription>
<para>Nowy właściciel pliku </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Nowy czas dodania pliku do sieci. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true w razie powodzenia, false w przeciwnym przypadku. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="254" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a1e1b6b4fca272a8a0340787753cc7341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
        <definition>list&lt;Resource&gt;::iterator getResource</definition>
        <argsstring>(ResourceHeader *header)</argsstring>
        <name>getResource</name>
        <param>
          <type><ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Zwróć lokalny zasób zgodny z otrzymanym pakietem AAP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="314" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="314" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a16e15afd1548a312e4890df78251debb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isValidResource</definition>
        <argsstring>(list&lt; Resource &gt;::iterator resource)</argsstring>
        <name>isValidResource</name>
        <param>
          <type>list&lt; <ref refid="struct_resource" kindref="compound">Resource</ref> &gt;::iterator</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>Kontrola poprawności zapisu informacji do pliku metadanych. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="329" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1a8a51ee3448b2234054e6be110f2826fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref></type>
        <definition>FileID deleteFile</definition>
        <argsstring>(string pathName)</argsstring>
        <name>deleteFile</name>
        <param>
          <type>string</type>
          <declname>pathName</declname>
        </param>
        <briefdescription>
<para>Usuniecie zasobu zwiazanego z plikiem spod lokalizacji podanej w argumencie wywolania. </para>        </briefdescription>
        <detaileddescription>
<para>Plik zostaje usuniety z dysku tylko jeśli jesteśmy właścicielami zasobu. <simplesect kind="return"><para>Informacje o usunietym zasobie. Jesli w bazie nie ma zasobu zwiazanego ze wskazywanym plikiem return null. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="345" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="345" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string tToString</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>tToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Konwersja typów prostych na string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="670" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="670" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="data_8hpp_1af7c646b83c0ce7c2c75dde5b3280f14b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T stringToT</definition>
        <argsstring>(std::string s)</argsstring>
        <name>stringToT</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Konwersja stringa na typy proste. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp" line="679" column="1" bodyfile="C:/Users/Artur/Downloads/TIN-master/data.hpp" bodystart="679" bodyend="684"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Funkcje i procedury zarządzające plikami na dysku. </para>    </briefdescription>
    <detaileddescription>
<para>Serializacja i deserializacja zasobów. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>DATA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resource_8h" kindref="compound">resource.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="netmsg_8hpp" kindref="compound">netmsg.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filedownload_8hpp" kindref="compound">filedownload.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="data_8hpp_1ad7e306ad4d8cfef5a438cc0863e169d7" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="data_8hpp_1ad7e306ad4d8cfef5a438cc0863e169d7" kindref="member">configFilePath</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./p2p.config&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structmutex__wrapper" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref><sp/>:<sp/>std::mutex</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Name,<sp/>uint64_t<sp/>Size)<sp/>:<sp/>name(Name),size(Size)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref>(<ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;other)<sp/>noexcept<sp/>:<sp/>std::mutex()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>other.name;<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>other.size;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="structmutex__wrapper" kindref="compound">mutex_wrapper</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;other)<sp/>noexcept</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">==&amp;other;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>size;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" refkind="member"><highlight class="normal">std::list&lt;Resource&gt;<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>;</highlight></codeline>
<codeline lineno="53" refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" refkind="member"><highlight class="normal">pthread_mutex_t<sp/><ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">pthread_mutex_t<sp/>fileMutexDequeMutex;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1ad319bb1cb29b05901905d84f8c56f7ff" kindref="member">deleteFile</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/><ref refid="data_8hpp_1a2e45c183b7abaaffcfba8fb45595484b" kindref="member">openResource</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*header);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">vector&lt;FileID*&gt;<sp/><ref refid="data_8hpp_1a9c5ef7840fcccd527006388d6dd3a732" kindref="member">myFindInStorage</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*header);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/>openResourceByIterator(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*<sp/>header,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*isNotEmpty);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">std::list&lt;Resource&gt;<sp/><ref refid="data_8hpp_1a3a3e05163d2c1bd8eb187195d8ac9c26" kindref="member">getMetaData</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref><sp/>*<sp/><ref refid="data_8hpp_1a7f3ebb7cc672825f174046fea067d411" kindref="member">getFileFragment</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1abe48d7a77b7a67d434c71d66fadb7af8" kindref="member">saveFileFragment</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref><sp/>*fragment);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9f9ce666365f27074a032061ed21b96e" kindref="member">initiateMutexes</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a36c612ff549082b179c5b61e43172944" kindref="member">destroyMutexes</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">uint64_t<sp/><ref refid="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" kindref="member">get_id</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal">uint64_t<sp/><ref refid="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" kindref="member">bytesToLong</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bytes);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a92b70bd6d6589844a997c437e031e5e1" kindref="member">returnFilePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cfg_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">vector&lt;string&gt;<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(vector&lt;string&gt;<sp/>parts,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="struct_resource" kindref="compound">Resource</ref><sp/>*<ref refid="data_8hpp_1a58b4deac4933aab644e32483d5192942" kindref="member">des2Resource</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a3461ef405c06f76bad7c84ea825bae8c" kindref="member">ser2Resource</ref>(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*<ref refid="data_8hpp_1ae0329aa66b908f871aca1187d959d876" kindref="member">des2FileID</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a89ab6b1a96da4bdb90b6fef803c460d2" kindref="member">ser2FileID</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="class_host" kindref="compound">Host</ref><sp/>*<ref refid="data_8hpp_1aee4b603e62817650a4d537cc6b307536" kindref="member">des2Host</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9fa57461540505d3f97b7f4e1d1347a1" kindref="member">ser2Host</ref>(<ref refid="class_host" kindref="compound">Host</ref><sp/>*host,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">sockaddr_in<sp/><ref refid="data_8hpp_1afccb319fe665a14274de06fb67fd7a0d" kindref="member">des2SockAddr_in</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a1940374549adff8f8fcf302b4c7cf88c" kindref="member">ser2SockAddr_in</ref>(sockaddr_in<sp/>sa,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">deque&lt;Host&gt;<sp/>*<ref refid="data_8hpp_1a0bc93f029db8bd46036aa34db2c1f91c" kindref="member">des2dequeHost</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a115dc969b812309e2bb555fb239e65dd" kindref="member">ser2dequeHost</ref>(deque&lt;Host&gt;<sp/>*d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">vector&lt;long&gt;<sp/><ref refid="data_8hpp_1a311e2d4ada7aa2a8e398c2b3aef0974d" kindref="member">des2vectorLong</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1ad0eaf7b063d50cd5cdd7729d1a1748de" kindref="member">ser2vectorLong</ref>(vector&lt;long&gt;<sp/>vl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a536b6d7add4d4fdca93c5de0f945c130" kindref="member">serializeMetaData</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a2357c582d35d9ae38dd79b66aec36ecf" kindref="member">deserializeMetaData</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">list&lt;FileID*&gt;<sp/><ref refid="data_8hpp_1a89895ee5bc432ebf982721021ee5ed5e" kindref="member">getUnlinked</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a8327ff30bca5f48ce70c85055a771eba" kindref="member">fileIsDownloading</ref>(list&lt;Resource&gt;::iterator<sp/>it);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9fa5a4bf9a71ff69aaa670b097b3c2c7" kindref="member">setFileIsDownloading</ref>(list&lt;Resource&gt;::iterator<sp/>it);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="data_8hpp_1a8327ff30bca5f48ce70c85055a771eba" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a8327ff30bca5f48ce70c85055a771eba" kindref="member">fileIsDownloading</ref>(list&lt;Resource&gt;::iterator<sp/>it)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>it-&gt;is_downloading;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="data_8hpp_1a9fa5a4bf9a71ff69aaa670b097b3c2c7" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9fa5a4bf9a71ff69aaa670b097b3c2c7" kindref="member">setFileIsDownloading</ref>(list&lt;Resource&gt;::iterator<sp/>it)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;is_downloading<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="data_8hpp_1a60695726d9d0486ddd7a54bafb820795" refkind="member"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/><ref refid="data_8hpp_1a60695726d9d0486ddd7a54bafb820795" kindref="member">addFile</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pathName,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fileName)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>path<sp/>=<sp/>pathName;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();<sp/>it++){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;filePathName<sp/>==<sp/>path){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file(path.c_str());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file.good())</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>buf;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>stat(path.c_str(),&amp;buf);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>uSize<sp/>=<sp/>buf.st_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sprawdzenie,<sp/>czy<sp/>nie<sp/>ma<sp/>resourcu<sp/>o<sp/>takej<sp/>samej<sp/>nazwie<sp/>i<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();<sp/>it++){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(it-&gt;id-&gt;name,fileName.c_str())<sp/>&amp;&amp;<sp/>it-&gt;id-&gt;size<sp/>==<sp/>uSize){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ownerId<sp/>=<sp/><ref refid="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" kindref="member">get_id</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ownerName<sp/>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(6);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ownerName,&amp;ownerId,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*6);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref>*<sp/>toReturn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;name<sp/>=<sp/>strdup(fileName.c_str());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;owner<sp/>=<sp/>ownerName;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;size<sp/>=<sp/>uSize;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_resource" kindref="compound">Resource</ref><sp/>res;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref><sp/>=<sp/>toReturn;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct_resource_1af00e53812e6a2dfc58dcba70effa49d8" kindref="member">filePathName</ref><sp/>=<sp/>pathName;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct_resource_1a4459bb60f5d48fb4b77919e45a0d973a" kindref="member">is_downloading</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct_resource_1a12f6231e35a6ca1b9b628dd506dc0215" kindref="member">peers</ref>.clear();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct_resource_1ab27d632de3aaa900460f7bf2b0a61e69" kindref="member">missingBlocks</ref>.clear();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;time<sp/>=<sp/>time(0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.push_back(res);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>it--;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="data_8hpp_1aa012024561c41d22fcccb80d2803ff89" refkind="member"><highlight class="normal">list&lt;FileID*&gt;<sp/><ref refid="data_8hpp_1aa012024561c41d22fcccb80d2803ff89" kindref="member">getFileIds</ref>()</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;FileID*&gt;<sp/>toReturn;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>res<sp/>:<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.push_back(res.id);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="data_8hpp_1ad319bb1cb29b05901905d84f8c56f7ff" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1ad319bb1cb29b05901905d84f8c56f7ff" kindref="member">deleteFile</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>info;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(it-&gt;id-&gt;name,id-&gt;name)==0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;size<sp/>==<sp/>it-&gt;id-&gt;size)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat((it-&gt;filePathName).c_str(),<sp/>&amp;info))</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">((it-&gt;filePathName).c_str())<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>while<sp/>deleting<sp/>physical<sp/>file&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)it-&gt;id-&gt;name);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)it-&gt;id-&gt;owner);<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;id;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.erase(it);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="data_8hpp_1af41ac35f7bec745690a4038c692e23d3" refkind="member"><highlight class="normal"><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*<sp/><ref refid="data_8hpp_1af41ac35f7bec745690a4038c692e23d3" kindref="member">isFileInStorage</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*<sp/>header)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*toReturn=__null;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>res<sp/>:<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(res.id-&gt;name,header-&gt;name)==0<sp/>&amp;&amp;<sp/>res.id-&gt;size==header-&gt;size.longNum)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/>res.id;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__null;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="data_8hpp_1a3a3e05163d2c1bd8eb187195d8ac9c26" refkind="member"><highlight class="normal">std::list&lt;Resource&gt;<sp/><ref refid="data_8hpp_1a3a3e05163d2c1bd8eb187195d8ac9c26" kindref="member">getMetaData</ref>(){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;<sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="data_8hpp_1ad6b4f2daae819d8fcf5a5bb22b5b7c61" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1ad6b4f2daae819d8fcf5a5bb22b5b7c61" kindref="member">changeOwner</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>newOwner,<sp/>time_t<sp/>addTime)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ownerName<sp/>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(6);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ownerName,newOwner,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*6);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;owner<sp/>=<sp/>ownerName;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;time<sp/>=<sp/>addTime;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="data_8hpp_1a2e45c183b7abaaffcfba8fb45595484b" refkind="member"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/><ref refid="data_8hpp_1a2e45c183b7abaaffcfba8fb45595484b" kindref="member">openResource</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*<sp/>header)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it!=<ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(it-&gt;id-&gt;name,header-&gt;name)==0<sp/>&amp;&amp;<sp/>it-&gt;id-&gt;size<sp/>==<sp/>header-&gt;size.longNum){</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref>*<sp/>newID<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>newID-&gt;size<sp/>=<sp/>header-&gt;size.longNum;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>newID-&gt;time<sp/>=<sp/>header-&gt;time.ttime;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*headerName<sp/>=<sp/>strdup(header-&gt;name);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ownerName<sp/>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(6);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ownerName,&amp;header-&gt;owner,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*6);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_resource" kindref="compound">Resource</ref><sp/>resource;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1a12f6231e35a6ca1b9b628dd506dc0215" kindref="member">peers</ref>.resize(0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref><sp/>=<sp/>newID;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>-&gt;name<sp/>=<sp/>headerName;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>-&gt;owner<sp/>=<sp/>ownerName;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1a4459bb60f5d48fb4b77919e45a0d973a" kindref="member">is_downloading</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>((long)(resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>-&gt;size<sp/>/<sp/>1024));<sp/>i++)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1ab27d632de3aaa900460f7bf2b0a61e69" kindref="member">missingBlocks</ref>.push_back(i);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>-&gt;size<sp/>%<sp/>1024){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1ab27d632de3aaa900460f7bf2b0a61e69" kindref="member">missingBlocks</ref>.push_back((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)((resource.<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>-&gt;size<sp/>/<sp/>1024)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>resource.<ref refid="struct_resource_1af00e53812e6a2dfc58dcba70effa49d8" kindref="member">filePathName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.push_back(resource);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;::iterator<sp/>resourceIt<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>resourceIt--;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resourceIt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="data_8hpp_1a1e1b6b4fca272a8a0340787753cc7341" refkind="member"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/><ref refid="data_8hpp_1a1e1b6b4fca272a8a0340787753cc7341" kindref="member">getResource</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*<sp/>header)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(it-&gt;id-&gt;name,header-&gt;name)==0<sp/>&amp;&amp;<sp/>it-&gt;id-&gt;size<sp/>==<sp/>header-&gt;size.longNum){</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="data_8hpp_1a16e15afd1548a312e4890df78251debb" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a16e15afd1548a312e4890df78251debb" kindref="member">isValidResource</ref>(list&lt;Resource&gt;::iterator<sp/>resource)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(resource<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="data_8hpp_1a8a51ee3448b2234054e6be110f2826fe" refkind="member"><highlight class="normal"><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/><ref refid="data_8hpp_1ad319bb1cb29b05901905d84f8c56f7ff" kindref="member">deleteFile</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pathName)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>toReturn;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;filePathName<sp/>==<sp/>pathName)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.name<sp/>=<sp/>it-&gt;id-&gt;name;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.owner<sp/>=<sp/>it-&gt;id-&gt;owner;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.size<sp/>=<sp/>it-&gt;id-&gt;size;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.time<sp/>=<sp/>it-&gt;id-&gt;time;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;id;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" kindref="member">bytesToLong</ref>(it-&gt;id-&gt;owner)<sp/>!=<sp/><ref refid="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" kindref="member">get_id</ref>())</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>info;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat((it-&gt;filePathName).c_str(),<sp/>&amp;info))</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">((it-&gt;filePathName).c_str())<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error<sp/>while<sp/>deleting<sp/>physical<sp/>file.<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.erase(it);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn.name<sp/>=<sp/>__null;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="data_8hpp_1a89895ee5bc432ebf982721021ee5ed5e" refkind="member"><highlight class="normal">list&lt;FileID*&gt;<sp/><ref refid="data_8hpp_1a89895ee5bc432ebf982721021ee5ed5e" kindref="member">getUnlinked</ref>()</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;FileID*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>info;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it-&gt;missingBlocks.empty()<sp/>&amp;&amp;<sp/>(stat(it-&gt;filePathName.c_str(),<sp/>&amp;info)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_front(it-&gt;id);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.erase(it);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it--;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="data_8hpp_1a9c5ef7840fcccd527006388d6dd3a732" refkind="member"><highlight class="normal">vector&lt;FileID*&gt;<sp/><ref refid="data_8hpp_1a9c5ef7840fcccd527006388d6dd3a732" kindref="member">myFindInStorage</ref>(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*header){</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;FileID*&gt;<sp/>vector;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkSize<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>headerSize=header-&gt;size.longNum;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(header-&gt;name!=NULL)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkName<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(headerSize!=0)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkSize<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>res<sp/>:<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>){</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(checkName<sp/>&amp;&amp;<sp/>checkSize){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(header-&gt;name,res.id-&gt;name)==0<sp/>&amp;&amp;<sp/>headerSize==res.id-&gt;size<sp/>&amp;&amp;<sp/>res.missingBlocks.empty()){</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector.push_back(res.id);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(checkName<sp/>&amp;&amp;<sp/>!checkSize<sp/>&amp;&amp;<sp/>res.missingBlocks.empty()){</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(header-&gt;name,res.id-&gt;name)==0){</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector.push_back(res.id);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!checkName<sp/>&amp;&amp;<sp/>checkSize<sp/>&amp;&amp;<sp/>res.missingBlocks.empty()){</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(headerSize==res.id-&gt;size){</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector.push_back(res.id);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">list&lt;Resource&gt;::iterator<sp/>openResourceByIterator(<ref refid="struct_resource_header" kindref="compound">ResourceHeader</ref><sp/>*<sp/>header,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*isNotEmpty){</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;::iterator<sp/>toReturn;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*headerName<sp/>=<sp/>strdup(header-&gt;name);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();it++){</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(it-&gt;id-&gt;name,headerName)==0<sp/>&amp;&amp;<sp/>it-&gt;id-&gt;size<sp/>==<sp/>header-&gt;size.longNum){</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*isNotEmpty<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>*isNotEmpty<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="data_8hpp_1a7f3ebb7cc672825f174046fea067d411" refkind="member"><highlight class="normal"><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref><sp/>*<sp/><ref refid="data_8hpp_1a7f3ebb7cc672825f174046fea067d411" kindref="member">getFileFragment</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>number){</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFind<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref><sp/>*ff<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structs_8h_1a9d0ed14c3ebf07053f4a45910928fc8d" kindref="member">FileFragment</ref>();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(ff-&gt;byteArray,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t)*1024);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>ff-&gt;number<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;::iterator<sp/>res;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();++it){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;id-&gt;size<sp/>==<sp/>id-&gt;size<sp/>&amp;&amp;<sp/>strcmp(it-&gt;id-&gt;name,id-&gt;name)==0)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>res<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>l<sp/>:<sp/>it-&gt;missingBlocks){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l==number)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFind<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>it-&gt;filePathName;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isFind)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__null;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>file.open(path);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file.good()){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.erase(res);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__null;<sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>file.seekg(1024*(number-1),ios::beg);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file.good()){</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFind<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ff-&gt;byteArray,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t)*1024);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519" refid="data_8hpp_1abe48d7a77b7a67d434c71d66fadb7af8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1abe48d7a77b7a67d434c71d66fadb7af8" kindref="member">saveFileFragment</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_file_fragment" kindref="compound">FileFragment</ref><sp/>*fragment){</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;::iterator<sp/>res;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;long&gt;::iterator<sp/>blockToDelete;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMissing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName<sp/>=<sp/>strdup(id-&gt;name);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>fileSize<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;size;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Resource&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.end();++it){</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(it-&gt;id-&gt;name,fileName)==0<sp/>&amp;&amp;<sp/>it-&gt;id-&gt;size==fileSize){</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;long&gt;::iterator<sp/>lit<sp/>=<sp/>res-&gt;missingBlocks.begin();<sp/>lit&lt;res-&gt;missingBlocks.end();lit++)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*lit<sp/>==<sp/>fragment-&gt;number)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMissing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockToDelete<sp/>=<sp/>lit;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isMissing)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isMissing){</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>resFilePathName<sp/>=<sp/>res-&gt;filePathName;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resSize<sp/>=<sp/>res-&gt;id-&gt;size;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>fstream<sp/>file;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>file.open(resFilePathName,<sp/>ios::in|ios::out|ios::ate);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file.good()){</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>.erase(res);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>file.seekp((fragment-&gt;number-1)*1024,ios_base::beg);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amountToWrite<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fragment-&gt;number-1)*1024+amountToWrite&gt;resSize)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amountToWrite<sp/>=<sp/>(resSize-(fragment-&gt;number-1)*1024)%1025;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)fragment-&gt;byteArray,amountToWrite);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;missingBlocks.erase(blockToDelete);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">};</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="data_8hpp_1a9f9ce666365f27074a032061ed21b96e" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9f9ce666365f27074a032061ed21b96e" kindref="member">initiateMutexes</ref>(){</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_mutex_init(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>,__null)!=0){</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;metaDataMutex<sp/>initialisation<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_mutex_init(&amp;fileMutexDequeMutex,__null)!=0){</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;fileMutexDequeMutex<sp/>initialisation<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595" refid="data_8hpp_1a36c612ff549082b179c5b61e43172944" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a36c612ff549082b179c5b61e43172944" kindref="member">destroyMutexes</ref>(){</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;fileMutexDequeMutex);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603" refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>(){</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);<sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>(){</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="data_8hpp_1a7ceea8598edaeadd59688a44c4f9aca0" kindref="member">metaDataMutex</ref>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="data_8hpp_1a2f7a6c53de0e389a922c7613b641d83a" kindref="member">get_id</ref>()</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>stream(</highlight><highlight class="stringliteral">&quot;/sys/class/net/eth0/address&quot;</highlight><highlight class="normal">,ifstream::in);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream.is_open())</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>macAddres,<sp/>tmp;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(stream,<sp/>macAddres);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>macAddres.size();<sp/>++i)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(macAddres[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/>macAddres[i];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>std::stoul(tmp,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.close();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*dir;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>opendir(</highlight><highlight class="stringliteral">&quot;/sys/class/net&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((dir<sp/>=<sp/>readdir(d))<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/sys/class/net/&quot;</highlight><highlight class="normal"><sp/>+<sp/>string(dir-&gt;d_name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/address&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.open(path,ifstream::in);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stream.is_open())</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>macAddres,<sp/>tmp;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(stream,<sp/>macAddres);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>macAddres.size();<sp/>++i)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(macAddres[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/>macAddres[i];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>std::stoul(tmp,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.close();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">!=0)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(d);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">==0)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>get<sp/>mac<sp/>address.<sp/>Network<sp/>interfaces<sp/>isn&apos;t<sp/>configurated\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670" refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t){</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="data_8hpp_1af7c646b83c0ce7c2c75dde5b3280f14b" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="data_8hpp_1af7c646b83c0ce7c2c75dde5b3280f14b" kindref="member">stringToT</ref>(std::string<sp/>s){</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>stream(s);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690" refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" refkind="member"><highlight class="normal">vector&lt;string&gt;<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charArray<sp/>=<sp/>s.c_str();<sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>part=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beginning<sp/>=0;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;s.length();i++){</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>charArray[i];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==dividerLeft){</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter==0)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginning<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==dividerRight){</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter--;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter==0){</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>=<sp/>s.substr(beginning+1,i-beginning-1);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.push_back(part);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parts;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721" refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(vector&lt;string&gt;<sp/>parts,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>part:parts){</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn+=dividerLeft;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn+=part+dividerRight;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732" refid="data_8hpp_1a58b4deac4933aab644e32483d5192942" refkind="member"><highlight class="normal"><ref refid="struct_resource" kindref="compound">Resource</ref><sp/>*<ref refid="data_8hpp_1a58b4deac4933aab644e32483d5192942" kindref="member">des2Resource</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_resource" kindref="compound">Resource</ref><sp/>*toReturn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_resource" kindref="compound">Resource</ref>();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref><sp/>=<sp/><ref refid="data_8hpp_1ae0329aa66b908f871aca1187d959d876" kindref="member">des2FileID</ref>(parts.at(0),dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;<ref refid="struct_resource_1af00e53812e6a2dfc58dcba70effa49d8" kindref="member">filePathName</ref><sp/>=parts.at(1);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;<ref refid="struct_resource_1a12f6231e35a6ca1b9b628dd506dc0215" kindref="member">peers</ref><sp/>=<sp/>*<ref refid="data_8hpp_1a0bc93f029db8bd46036aa34db2c1f91c" kindref="member">des2dequeHost</ref>(parts.at(2),dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;<ref refid="struct_resource_1ab27d632de3aaa900460f7bf2b0a61e69" kindref="member">missingBlocks</ref><sp/>=<sp/><ref refid="data_8hpp_1a311e2d4ada7aa2a8e398c2b3aef0974d" kindref="member">des2vectorLong</ref>(parts.at(3),dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;<ref refid="struct_resource_1a4459bb60f5d48fb4b77919e45a0d973a" kindref="member">is_downloading</ref><sp/>=<sp/>stringToT&lt;bool&gt;(parts.at(4));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746" refid="data_8hpp_1a3461ef405c06f76bad7c84ea825bae8c" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a3461ef405c06f76bad7c84ea825bae8c" kindref="member">ser2Resource</ref>(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1a89ab6b1a96da4bdb90b6fef803c460d2" kindref="member">ser2FileID</ref>(r-&gt;<ref refid="struct_resource_1a6d7e5386dab132c6ff3bf268c896da46" kindref="member">id</ref>,dividerLeft,dividerRight));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(r-&gt;<ref refid="struct_resource_1af00e53812e6a2dfc58dcba70effa49d8" kindref="member">filePathName</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1a115dc969b812309e2bb555fb239e65dd" kindref="member">ser2dequeHost</ref>(&amp;(r-&gt;<ref refid="struct_resource_1a12f6231e35a6ca1b9b628dd506dc0215" kindref="member">peers</ref>),dividerLeft,dividerRight));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1ad0eaf7b063d50cd5cdd7729d1a1748de" kindref="member">ser2vectorLong</ref>((r-&gt;<ref refid="struct_resource_1ab27d632de3aaa900460f7bf2b0a61e69" kindref="member">missingBlocks</ref>),dividerLeft,dividerRight));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(tToString&lt;bool&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762" refid="data_8hpp_1ae0329aa66b908f871aca1187d959d876" refkind="member"><highlight class="normal"><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*<ref refid="data_8hpp_1ae0329aa66b908f871aca1187d959d876" kindref="member">des2FileID</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*toReturn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structs_8h_1ad2196a018ba2b7686a1088e9b0feacd3" kindref="member">FileID</ref>();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;name<sp/>=<sp/>strdup(parts.at(0).c_str());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>owner<sp/>=<sp/>stringToT&lt;uint64_t&gt;(parts.at(1));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ownerId<sp/>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(6);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ownerId,&amp;owner,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*6);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;owner<sp/>=<sp/>ownerId;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;size<sp/>=<sp/>stringToT&lt;uint64_t&gt;(parts.at(2));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;time<sp/>=<sp/>stringToT&lt;time_t&gt;(parts.at(3));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777" refid="data_8hpp_1a89ab6b1a96da4bdb90b6fef803c460d2" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a89ab6b1a96da4bdb90b6fef803c460d2" kindref="member">ser2FileID</ref>(<ref refid="struct_file_i_d_struct" kindref="compound">FileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>strdup(id-&gt;name);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>size<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;size;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>time<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;time;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(name));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>owner<sp/>=<sp/><ref refid="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" kindref="member">bytesToLong</ref>(id-&gt;owner);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(tToString&lt;uint64_t&gt;(owner));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(tToString&lt;uint64_t&gt;(size));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(tToString&lt;time_t&gt;(time));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794" refid="data_8hpp_1aee4b603e62817650a4d537cc6b307536" refkind="member"><highlight class="normal"><ref refid="class_host" kindref="compound">Host</ref><sp/>*<ref refid="data_8hpp_1aee4b603e62817650a4d537cc6b307536" kindref="member">des2Host</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_host" kindref="compound">Host</ref><sp/>*toReturn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_host" kindref="compound">Host</ref>();</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;sock<sp/>=<sp/>stringToT&lt;int&gt;(parts.at(0));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;asked_fragment<sp/>=<sp/>stringToT&lt;int&gt;(parts.at(1));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;get_fragment<sp/>=<sp/>stringToT&lt;int&gt;(parts.at(2));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;portion<sp/>=<sp/>stringToT&lt;int&gt;(parts.at(3));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;time_of_start<sp/>=<sp/>stringToT&lt;time_t&gt;(parts.at(4));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;addr<sp/>=<sp/><ref refid="data_8hpp_1afccb319fe665a14274de06fb67fd7a0d" kindref="member">des2SockAddr_in</ref>(parts.at(5),dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn-&gt;addr_length<sp/>=<sp/>stringToT&lt;socklen_t&gt;(parts.at(6));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809" refid="data_8hpp_1a9fa57461540505d3f97b7f4e1d1347a1" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a9fa57461540505d3f97b7f4e1d1347a1" kindref="member">ser2Host</ref>(<ref refid="class_host" kindref="compound">Host</ref><sp/>*host,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock<sp/>=<sp/>host-&gt;sock;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asked_fragment<sp/>=<sp/>host-&gt;asked_fragment;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_fragment<sp/>=<sp/>host-&gt;get_fragment;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portion<sp/>=<sp/>host-&gt;portion;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>time_of_start<sp/>=<sp/>host-&gt;time_of_start;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>addr<sp/>=<sp/>host-&gt;addr;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>addr_length<sp/>=<sp/>host-&gt;addr_length;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(sock));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(asked_fragment));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(get_fragment));</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(portion));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(time_of_start));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1a1940374549adff8f8fcf302b4c7cf88c" kindref="member">ser2SockAddr_in</ref>(addr,dividerLeft,dividerRight));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(addr_length));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="data_8hpp_1afccb319fe665a14274de06fb67fd7a0d" refkind="member"><highlight class="normal">sockaddr_in<sp/><ref refid="data_8hpp_1afccb319fe665a14274de06fb67fd7a0d" kindref="member">des2SockAddr_in</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>sockaddr_in<sp/>toReturn;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn.sin_family<sp/>=<sp/>stringToT&lt;short&gt;(parts.at(0));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn.sin_port<sp/>=<sp/>stringToT&lt;unsigned<sp/>short&gt;(parts.at(1));</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn.sin_addr.s_addr<sp/>=<sp/>stringToT&lt;unsigned<sp/>long&gt;(parts.at(2));</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>zero<sp/>=<sp/>stringToT&lt;uint64_t&gt;(parts.at(3));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(toReturn.sin_zero,&amp;zero,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(toReturn.sin_zero));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847" refid="data_8hpp_1a1940374549adff8f8fcf302b4c7cf88c" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a1940374549adff8f8fcf302b4c7cf88c" kindref="member">ser2SockAddr_in</ref>(sockaddr_in<sp/>sa,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>zero;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;zero,sa.sin_zero,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sa.sin_zero));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(sa.sin_family));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(sa.sin_port));</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(sa.sin_addr.s_addr));</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1af57bbb5571f66cb39a0099f935dce874" kindref="member">tToString</ref>(zero));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864" refid="data_8hpp_1a0bc93f029db8bd46036aa34db2c1f91c" refkind="member"><highlight class="normal">deque&lt;Host&gt;<sp/>*<ref refid="data_8hpp_1a0bc93f029db8bd46036aa34db2c1f91c" kindref="member">des2dequeHost</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>deque&lt;Host&gt;<sp/>*toReturn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>deque&lt;Host&gt;();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_host" kindref="compound">Host</ref><sp/>*h;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>part<sp/>:<sp/>parts){</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="data_8hpp_1aee4b603e62817650a4d537cc6b307536" kindref="member">des2Host</ref>(part,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn-&gt;push_back(*h);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877" refid="data_8hpp_1a115dc969b812309e2bb555fb239e65dd" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a115dc969b812309e2bb555fb239e65dd" kindref="member">ser2dequeHost</ref>(deque&lt;Host&gt;<sp/>*d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="class_host" kindref="compound">Host</ref><sp/>h:<sp/>*d)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.push_back(<ref refid="data_8hpp_1a9fa57461540505d3f97b7f4e1d1347a1" kindref="member">ser2Host</ref>(&amp;h,dividerLeft,dividerRight));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891" refid="data_8hpp_1a311e2d4ada7aa2a8e398c2b3aef0974d" refkind="member"><highlight class="normal">vector&lt;long&gt;<sp/><ref refid="data_8hpp_1a311e2d4ada7aa2a8e398c2b3aef0974d" kindref="member">des2vectorLong</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>build,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts<sp/>=<sp/><ref refid="data_8hpp_1acd051a08305bfd78559100f1a96bd6a0" kindref="member">putToParts</ref>(build,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;long&gt;<sp/>toReturn;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>part<sp/>:<sp/>parts){</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>stringToT&lt;long&gt;(part);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toReturn.push_back(l);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904" refid="data_8hpp_1ad0eaf7b063d50cd5cdd7729d1a1748de" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1ad0eaf7b063d50cd5cdd7729d1a1748de" kindref="member">ser2vectorLong</ref>(vector&lt;long&gt;<sp/>vl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerLeft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dividerRight){</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toReturn=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>l<sp/>:<sp/>vl)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.push_back(tToString&lt;long&gt;(l));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>toReturn<sp/>=<sp/><ref refid="data_8hpp_1a120af63c8003fb18da665f7e307584db" kindref="member">buildFromParts</ref>(parts,dividerLeft,dividerRight);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918" refid="data_8hpp_1a536b6d7add4d4fdca93c5de0f945c130" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a536b6d7add4d4fdca93c5de0f945c130" kindref="member">serializeMetaData</ref>(){</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;<sp/>container<sp/>=<sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>lines;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="struct_resource" kindref="compound">Resource</ref><sp/>r<sp/>:<sp/>container)</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines.push_back(<ref refid="data_8hpp_1a3461ef405c06f76bad7c84ea825bae8c" kindref="member">ser2Resource</ref>(&amp;r,<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>file;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>file.open(</highlight><highlight class="stringliteral">&quot;_metaData.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file.good())</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>lines)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file&lt;&lt;line&lt;&lt;endl;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="data_8hpp_1a2357c582d35d9ae38dd79b66aec36ecf" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a2357c582d35d9ae38dd79b66aec36ecf" kindref="member">deserializeMetaData</ref>(){</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;Resource&gt;<sp/>container;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file(</highlight><highlight class="stringliteral">&quot;_metaData.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file.good())</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(file,line)){</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container.push_back(*<ref refid="data_8hpp_1a58b4deac4933aab644e32483d5192942" kindref="member">des2Resource</ref>(line,</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a907cb8541be0266a9b471f343083f58a" kindref="member">lockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1a800b1bcc5d94702e777ac049989c7478" kindref="member">metaData</ref>=container;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="data_8hpp_1aae48b6e618b7e4da6be36e2ccdaf5834" kindref="member">unlockMetaDataMutex</ref>();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="data_8hpp_1aab3f7e723c2b26f5a0eee43b3cab4c1d" kindref="member">bytesToLong</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bytes)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">ByteLong{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bytes[6];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>number;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}byteLong;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;byteLong,<sp/>bytes,<sp/>6);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byteLong.number;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="data_8hpp_1a92b70bd6d6589844a997c437e031e5e1" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="data_8hpp_1a92b70bd6d6589844a997c437e031e5e1" kindref="member">returnFilePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cfg_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>info;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>directorypath[400];</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>configFile(cfg_path);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!configFile.is_open()){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>open<sp/>config<sp/>file.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>configFile.getline(directorypath,<sp/>400);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>configFile.close();</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fName(filename);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filePath<sp/>=<sp/>string(directorypath)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>fName;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat(filePath.c_str(),<sp/>&amp;info))</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>fName.find_last_of(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extension<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>string::npos)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>fName;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filePath<sp/>=<sp/>extension<sp/>?<sp/>string(directorypath)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>temp.insert(index,<sp/>to_string(counter))<sp/>:<sp/>string(directorypath)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>temp<sp/>+<sp/>to_string(counter);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stat(filePath.c_str(),<sp/>&amp;info)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>fstream<sp/>fs;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>fs.open(filePath,<sp/>ios::out);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs.is_open())</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs.close();</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>file<sp/>to<sp/>downloading.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filePath;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Artur/Downloads/TIN-master/data.hpp"/>
  </compounddef>
</doxygen>
